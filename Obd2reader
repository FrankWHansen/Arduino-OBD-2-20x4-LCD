 // include the library code:
  #include <LiquidCrystal.h>

  // initialize the library with the numbers of the interface pins
  LiquidCrystal lcd(7, 8, 9, 10, 11, 12);

  //This is a character buffer that will store the data from the serial port
  char rxData[20];
  char rxIndex=0;

  int dtc1;
  int dtc2;
  int dtc3;
  int dtc4;
  int dtc5;
  int dtc6;

void setup() {
  // put your setup code here, to run once:

  Serial.begin(9600);
  
  // set up the LCD's number of columns and rows:
  lcd.begin(20, 4);
  // Print a message to the LCD.
  lcd.setCursor(0,1);
  lcd.print("On-Board Diagnostics");
  OBD_init();
  //delay(2500);
  lcd.clear();
  //delay(250);
  lcd.setCursor(0, 0);
  lcd.noCursor();

}

void loop() {
  // put your main code here, to run repeatedly:

   //Query the OBD-II-UART for stored Diagnostic Trouble Code(DTC)s
  Serial.flush();
  Serial.print("03\r");
  OBD_read();

  return ((strtol(&rxData[6],0,16)*256)+strtol(&rxData[9],0,16))/4;

  delay(240000);
}
 

}

void OBD_init(void)
{
  //Wait for a little while before sending the reset command to the OBD-II-UART
  delay(2000);
  //Reset the OBD-II-UART
  Serial.print("ATZ\r");
  //Wait for a bit before starting to send commands after the reset.
  delay(2000);
  OBD_read();
  Serial.print("ATE0\r");
  OBD_read();
  Serial.flush();
}

void OBD_read(void)
{
  char c;
  do{
    if(Serial.available() > 0)
    {
      c = Serial.read();
      //lcd.print(c);
      if((c!= '>') && (c!='\r') && (c!='\n')) //Keep these out of our buffer
      {
        rxData[rxIndex++] = c; //Add whatever we receive to the buffer
      }  
     }     
  }while(c != '>'); //The ELM327 ends its response with this char so when we get it we exit out.
  rxData[rxIndex++] = '\0';//Converts the array into a string
  rxIndex=0; //Set this to 0 so next time we call the read we get a "clean buffer"
