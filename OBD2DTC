  // Hardware: Arduino Uno, Sparkfun OBD-II UART board, 20x4 character parallel LCD
  // Code: https://forum.sparkfun.com/viewtopic.php?f=14&t=35507 kiteman, 3rd post.
  
  // I have modified this code to work with my parallel LCD, and to be able to read
  // Diagnostic Trouble Code(DTC)s instead of getting a live feed of data from the car.
  // DTC primer: https://en.wikipedia.org/wiki/OBD-II_PIDs#Mode_3_.28no_PID_required.29
  
  #include <LiquidCrystal.h>

  LiquidCrystal lcd(7, 8, 9, 10, 11, 12);

  // Character buffer to store data from the serial port
  char rxData[20];
  char rxIndex=0;

  // A fixed array that stores the 4 possible letters the first char a DTC can be
  // P = Powertrain, C = Chassis, B = Body, U = Network
  const char DTCletter[] = {'P', 'C', 'B', 'U', '\0'};

  // 2dim array with room for 8 DTCs. Each row can hold a 5 char DTC
  char DTCarray[8][6]; // figure out if needs to be 9/6 (most likely null value in both dimensions)
  
void setup() {
  // Initiate serial connection with OBD-2 board @ 9600 baud
  Serial.begin(9600);
  
  // set up LCD columns & rows, then display a simple welcome screen
  lcd.begin(20, 4);
  lcd.setCursor(0,1);
  lcd.print("On-Board Diagnostics");
  lcd.setCursor(0,2);
  // just a simple test to see if the variables are stored correctly in DTCletter[]
  lcd.print(DTCletter[]);
  // OBD_init() resets OBD-II board and turns off echoing
  lcd.setCursor(0,3);
  lcd.print("OBD_init() starting");
  OBD_init();
  lcd.setCursor(0,3);
  lcd.print("OBD_init() finished");
  delay(2000);
  lcd.clear();
}

void loop() {
  // Delete any data that may be left over in the serial port.
  Serial.flush();
  delay(200);
  getDTC(); //run getDTC() to retrieve fault codes
  // delay 240 seconds to be able to write down the codes before the loop starts over.
  // This is just a temporary delay, while I figure out how to take things further.
  delay(240000);
  
}

void OBD_init(void) {
  //Wait for a little while before sending the reset command to the OBD-II-UART
  delay(2000);
  //Reset the OBD-II-UART
  Serial.print("ATZ\r");
  //Wait for a bit before starting to send commands after the reset.
  delay(2000);
  OBD_read();
  Serial.print("ATE0\r");
  OBD_read();
  Serial.flush();
}

char getDTC(void) {
  lcd.setCursor(0,1);
  lcd.print("getDTC() started");
  Serial.flush();
  // OBD-2 mode 03: "Read DTCs!"
  Serial.print("03\r");
  // read incoming data from OBD-2 card
  OBD_read();
  // give the car a reasonable time to respond
  delay(1000);
  // count variable that will simplify the for loop a lot
  int loopCount = sizeof(rxData[0]) / 2;
  // I will make a separate variable to make sure we can go through one byte of rxData at a time
  int byteCount = 0;
  // Each iteration will go through 2 bytes
  for (int i = 0; i < loopCount; i++) {
    // Set the first char in each row of the two-dimensional char array to whatever the output of DTCletter[letter] is.
    DTCarray[i][0] = DTCletter[rxData[i] >> 6];
    // The first digit also consists of only two bits (decimal values range from 0 up to and including 3).
    DTCarray[i][1] = ((rxData[byteCount] >> 4) & 0x3);
    // The last three digits are each one nibble (half-byte)
    DTCarray[i][2] = (rxData[byteCount] & 0xf);
    // Now we've depleted the first byte of information in this DTC, so we move on to the second one.
    byteCount++;
    DTCarray[i][3] = (rxData[byteCount] >> 4 & 0xf);
    DTCarray[i][4] = (rxData[byteCount] & 0xf);
    byteCount++;
  }
  for (int i = 0; i < 8; i++) {
    lcd.setCursor((floor(i / 4) * 10), i % 4);
    for (int j = 0; j > 6; j++) {
      lcd.print("DTC" + (i + 1) + ':' + DTCarray[i][j]);
    }
  }
}

// This function stores each byte read in a local char c, and adds it to the buffer array rxData[]
void OBD_read(void) {
  char c;
  do{
    // basically, if there's traffic, parse it
    if(Serial.available() > 0)
    {
      c = Serial.read();
      //lcd.print(c);
      if((c!= '>') && (c!='\r') && (c!='\n')) //Keep these out of our buffer
      {
        rxData[rxIndex++] = c; //Add whatever we receive to the buffer
      }
     }
  }while(c != '>'); //The ELM327 ends its response with this char so when we get it we exit out.
  rxData[rxIndex++] = '\0';//Converts the array into a string
  rxIndex=0; //Set this to 0 so next time we call the read we get a "clean buffer"
}
